<?php

declare(strict_types=1);

namespace Flashcard\Domain\Models;

use Shared\Enum\LanguageLevel;
use Shared\Utils\ValueObjects\Language;
use Flashcard\Domain\Exceptions\InvalidPromptException;

class FlashcardPrompt
{
    private readonly Language $word_lang;
    private readonly Language $translation_lang;

    private string $prompt = '
        JesteÅ› algorytmem AI generujÄ…cym sÅ‚owa do nauki jÄ™zyka angielskiego.
        Na podstawie tematu podanego przez uÅ¼ytkownika utwÃ³rz historiÄ™ skÅ‚adajÄ…cÄ… siÄ™ Å‚Ä…cznie z ${{words_count}} zdaÅ„ po angielsku. 
        Podziel historiÄ™ na czÄ™Å›ci, ktÃ³re muszÄ… mieÄ‡ po 3â€“4 zdania kaÅ¼da â€” kaÅ¼da czÄ™Å›Ä‡ to osobna mini-historia, 
        ktÃ³ra w obrÄ™bie tych zdaÅ„ musi tworzyÄ‡ spÃ³jnÄ…, logicznÄ… caÅ‚oÅ›Ä‡ (czyli krÃ³tkie zdarzenie z poczÄ…tkiem, Å›rodkiem i koÅ„cem).
        Dla kaÅ¼dego zdania wygeneruj jego tÅ‚umaczenie na jÄ™zyk polski.
        NastÄ™pnie z wygenerowanych zdaÅ„ wyodrÄ™bnij sÅ‚owa do fiszek (flashcards). Wybrane sÅ‚owa muszÄ…:
        â€“ wystÄ™powaÄ‡ w zdaniu w swojej podstawowej (nieodmienionej) formie,
        â€“ bezpoÅ›rednio odnosiÄ‡ siÄ™ do tematu,
        â€“ nie powtarzaÄ‡ siÄ™ w innych historiach.
        Story: rozmowa z kasjerem
            - Emma walked into the store and picked up a bottle of water.
            - She went to the counter where the cashier was waiting.
            - The cashier said, "That will be two dollars, please."
        Wynik zapisz w formie prostego kodu JSON:
        [{
        "word": "kasjer",
        "trans": "cashier",
        "sentence":"PoszÅ‚a do lady, gdzie czekaÅ‚ kasjer.",
        "sentence_trans":"She went to the counter where the cashier was waiting.",
        "emoji":"ðŸ˜€",
        "story_id": 1
        },...]
        Opis pÃ³l:
         - word: sÅ‚owo po polsku
         - trans: jego tÅ‚umaczenie na angielski
         - sentence: zdanie po polsku, w ktÃ³rym wystÄ™puje sÅ‚owo
         - sentence_trans: tÅ‚umacznie zdania na angielski
         â€“ story_id: numer historii, z ktÃ³rej pochodzi (story_id).
        Wygeneruj odpowiedÅº w formacie JSON zawierajÄ…cÄ… ${{words_count}} rekordÃ³w.
        UwzglÄ™dnij rÃ³wnieÅ¼ specyfikacjÄ™ poziomu jÄ™zyka. Wybrany poziom to: ${{level}}
        ${{letters_condition}}
        Zastosuj:
            - kreatywnoÅ›Ä‡ w tworzeniu przykÅ‚adÃ³w
            - losowe ziarno generowania: ${{seed}}
        Prompt uÅ¼ytkownika to: ${{category}}.
        Warunek bÅ‚edu: JeÅ›li z jakiegoÅ› powodu nie jesteÅ› w stanie wygenerowaÄ‡ rekordÃ³w dla danej sytuacji, zamiast rekordÃ³w odpowiedz w formacie 
        {"error":"prompt"}
        Twoja odpowiedÅº ma zawieraÄ‡ tylko i wyÅ‚Ä…cznie dane w formacie JSON i nic wiÄ™cej.
    ';

    public function __construct(
        private readonly string $category,
        private readonly LanguageLevel $language_level,
        private readonly int $words_count = 10,
        private array $initial_letters_to_avoid = [],
    ) {
        $this->buildPrompt();
        $this->word_lang = Language::pl();
        $this->translation_lang = Language::en();
    }

    public function getPrompt(): string
    {
        return $this->prompt;
    }

    public function getWordLang(): Language
    {
        return $this->word_lang;
    }

    public function getTranslationLang(): Language
    {
        return $this->translation_lang;
    }

    private function buildPrompt(): void
    {
        $this->setRandomSeed();
        $this->setCategory();
        $this->setLanguageLevel();
        $this->setWordsCount();
        $this->setInitialLettersToAvoid();
        $this->removeWhiteCharacters();
    }

    private function setRandomSeed(): void
    {
        $this->prompt = str_replace('${{seed}}', (string) random_int(0, 1000), $this->prompt);
    }

    private function setCategory(): void
    {
        if (!str_contains($this->prompt, '${{category}}')) {
            throw new InvalidPromptException('Invalid prompt exception');
        }

        $this->prompt = str_replace('${{category}}', $this->category, $this->prompt);
    }

    private function setLanguageLevel(): void
    {
        if (!str_contains($this->prompt, '${{level}}')) {
            throw new InvalidPromptException('Invalid prompt exception. Language level not defined');
        }

        $this->prompt = str_replace('${{level}}', $this->language_level->value, $this->prompt);
    }

    private function setWordsCount(): void
    {
        if (!str_contains($this->prompt, '${{words_count}}')) {
            throw new InvalidPromptException('Invalid prompt exception');
        }

        $this->prompt = str_replace('${{words_count}}', (string) $this->words_count, $this->prompt);
    }

    private function setInitialLettersToAvoid(): void
    {
        if (!str_contains($this->prompt, '${{letters_condition}}')) {
            throw new InvalidPromptException('Invalid prompt exception');
        }

        $letters = implode(',', $this->initial_letters_to_avoid);

        if ($letters === '') {
            $this->prompt = str_replace('${{letters_condition}}', '', $this->prompt);
        } else {
            $condition = 'Unikaj sÅ‚Ã³w zaczynajÄ…cych siÄ™ na litery: ';
            $this->prompt = str_replace('${{letters_condition}}', $condition . $letters, $this->prompt);
        }
    }

    private function removeWhiteCharacters(): void
    {
        $this->prompt = str_replace(["\n", "\r"], '', $this->prompt);
    }
}
